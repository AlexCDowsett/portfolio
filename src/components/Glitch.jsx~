import React, { useEffect, useState, useRef } from "react";
import "./Glitch.css"; // Ensure you have this file for any additional styling

const GlitchEffect = ({ text, bgColor = null, textColor = null }) => {
    const [displayedText, setDisplayedText] = useState(text); // Initial displayed text
    const [isGlitching, setIsGlitching] = useState(false); // To manage if the glitch effect is active
    const [index, setIndex] = useState(0); // Track how much of the text has been revealed
    const [lastIndex, setLastIndex] = useState(0); // Store the last revealed index
    const [hasGlitched, setHasGlitched] = useState(false); // Flag to prevent re-glitching
    const textRef = useRef(null); // Reference for the text element

    // Convert hex color to RGB
    const hexToRgb = (hex) => {
        let r = 0, g = 0, b = 0;
        if (hex && hex.length === 7) {
            r = parseInt(hex.slice(1, 3), 16);
            g = parseInt(hex.slice(3, 5), 16);
            b = parseInt(hex.slice(5, 7), 16);
        }
        return [r, g, b];
    };

    // Convert RGB to hex
    const rgbToHex = (r, g, b) => {
        return `#${((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1).toUpperCase()}`;
    };

    // Function to generate a random character
    const randomChars = () => {
        const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+";
        return chars.charAt(Math.floor(Math.random() * chars.length));
    };

    useEffect(() => {
        const observer = new IntersectionObserver(
            (entries) => {
                entries.forEach((entry) => {
                    if (entry.isIntersecting) {
                        if (!isGlitching && !hasGlitched) { // Start glitching if not already active and has not glitched
                            setIsGlitching(true); // Start glitching when visible
                            setIndex(lastIndex); // Resume from the last revealed index
                        }
                    } else {
                        // Pause glitching when not visible
                        setLastIndex(index); // Store the last revealed index correctly
                        setIsGlitching(false); // Stop glitching
                    }
                });
            },
            { threshold: 0.1 } // Adjust the threshold as needed
        );

        if (textRef.current) {
            observer.observe(textRef.current); // Observe the text element
        }

        return () => {
            if (textRef.current) {
                observer.unobserve(textRef.current); // Clean up observer on unmount
            }
        };
    }, [isGlitching, lastIndex, hasGlitched, text]); // Add lastIndex and hasGlitched to dependencies

    useEffect(() => {
        const bgRgb = hexToRgb(bgColor);
        const textRgb = hexToRgb(textColor);

        const interval = setInterval(() => {
            if (isGlitching && index < text.length) {
                let newText = "";
                for (let i = 0; i < text.length; i++) {
                    // Determine color transition based on whether at least one color is set
                    const currentColor =
                        (bgColor || textColor)
                            ? rgbToHex(
                                Math.round(bgRgb[0] + (textRgb[0] - bgRgb[0]) * (index / text.length)),
                                Math.round(bgRgb[1] + (textRgb[1] - bgRgb[1]) * (index / text.length)),
                                Math.round(bgRgb[2] + (textRgb[2] - bgRgb[2]) * (index / text.length))
                            )
                            : "inherit"; // Use "inherit" for no transition effect

                    // Create span for each character to apply individual styles
                    if (text[i] === ' ') {
                        newText += ' '; // Preserve spaces
                    } else {
                        newText += `<span style="color: ${currentColor}; transition: color 0.2s;">${i < index ? text[i] : randomChars()}</span>`;
                    }
                }
                setDisplayedText(newText); // Update displayed text with glitches
            }
        }, 20); // Glitch interval for character changes

        return () => clearInterval(interval); // Clean up interval on unmount
    }, [isGlitching, index, text, bgColor, textColor]);

    useEffect(() => {
        const timeout = setTimeout(() => {
            if (isGlitching && index < text.length) {
                setIndex(index + 1); // Reveal the next character
            } else if (index >= text.length && isGlitching) {
                setIsGlitching(false); // Stop glitching once the full text is revealed
                setHasGlitched(true); // Set flag to prevent future glitching
                setDisplayedText(text); // Display the final text
                
            }
        }, 20); // Speed of revealing characters

        return () => clearTimeout(timeout); // Clean up timeout on unmount
    }, [index, text, isGlitching]);

    return (
        <span
            ref={textRef}
            className="glitch-text"
            style={{
                color: textColor || 'inherit', // Apply text color if provided, else inherit
                textShadow: 'none', // Ensure no text shadow to avoid outlines
                WebkitFontSmoothing: 'antialiased', // Smooth the font rendering
                MozOsxFontSmoothing: 'grayscale', // Smooth the font rendering
                backgroundColor: 'transparent' // Ensure no background color is applied
            }}
            dangerouslySetInnerHTML={{ __html: displayedText }}
        />
    );
};

export default GlitchEffect;
